#!/usr/bin/env sh

change_shell () {
    if [ "$(echo "$SHELL" | xargs basename)" != "fish" ]; then
        sudo chsh -s "$(command -v fish)" "$USER"
        echo '\x1b[0;32mShell changed to fish.\x1b[0m'
    else
        echo '\x1b[0;33mShell already set to fish.\x1b[0m'
    fi
}

set_up_asdf () {
    if [ ! -d "$HOME"/.asdf ]; then
        git clone https://github.com/asdf-vm/asdf.git "$HOME"/.asdf --branch v0.10.2
    fi
    mkdir -p "$HOME"/.config/fish/completions
    if [ ! -f "$HOME"/.config/fish/completions/asdf.fish ]; then
        ln -s "$HOME"/.asdf/completions/asdf.fish "$HOME"/.config/fish/completions
    fi
    . "$HOME"/.asdf/asdf.sh
    asdf update
    echo '\x1b[0;32masdf is installed. Installing tools...\x1b[0m'

    while IFS= read -r plugin; do
        echo "$plugin" | sed -E 's/^(.*) .*/\1/' | xargs asdf plugin add
    done < "$HOME"/.tool-versions

    cd "$HOME" || { echo '\x1b[0;31mCould not go to home directory. Exiting.\x1b[0m'; exit 1; }
    asdf install
    # run a second time because node-build doesn't alias its lts version the
    # first time you try to install
    asdf install
    cd - >/dev/null || { echo '\x1b[0;31mCould not return to dotfiles directory. Exiting.\x1b[0m'; exit 1; }

    python -m pip install --upgrade pip
    npm install -g npm
    echo '\x1b[0;32masdf tools installed.\x1b[0m'
}

set_up_vim () {
    if [ ! -f "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim ]; then
        sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
           https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        echo '\x1b[0;32mVim-plug has been installed.\x1b[0m'
    else
        echo '\x1b[0;33mVim-plug is already installed.\x1b[0m'
    fi

    python -m pip install pynvim
    npm install -g neovim

    nvim -e -u ~/.config/nvim/init.vim -i NONE -c "PlugInstall" -c "GoInstallBinaries" -c "qa"
    echo 'Wait for CoC to install its plugins before exiting.' | nvim -R -
}

shared_setup () {
    change_shell
    set_up_asdf
    set_up_vim
}

os_name="$(uname -s)"
echo "Setting up $os_name..."

if [ "$os_name" = "Darwin" ]; then
    if [ ! "$(xcode-select --version)" = "" ]; then
        echo '\x1b[0;32mXCode is already installed.\x1b[0m'
    else
        if xcode-select --install; then
            echo '\x1b[0;32mInstalled XCode.\x1b[0m'
        else
            echo '\x1b[0;31mFailed to install XCode. Exiting.\x1b[0m' && exit 1
        fi
    fi

    if sudo softwareupdate --install-rosetta --agree-to-license; then
        echo '\x1b[0;32mInstalled Rosetta.\x1b[0m'
    else
        echo '\x1b[0;31mFailed to install Rosetta. Exiting.\x1b[0m' && exit 1
    fi
    sudo softwareupdate -ir
    echo '\x1b[0;32mAttempted to install recommended updates.\x1b[0m'

    if [ ! -d /opt/homebrew/ ]; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    brew bundle install --file Brewfile

    RCRC="$HOME"/.dotfiles/rcrc rcup -t mac

    # disable "smart" quotes
    defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

    chromedir="$(echo "$HOME"/Library/Application\ Support/Firefox/Profiles/*default-release/chrome)"
    mkdir -p chromedir
    if [ ! -f "$chromedir/userChrome.css" ]; then
        ln -s "$HOME"/.dotfiles/userChrome.css "$chromedir"/userChrome.css
        echo '\x1b[0;32mFirefox styling applied.\x1b[0m'
    else
        echo '\x1b[0;33mFirefox styling already exists.\x1b[0m'
    fi

    shared_setup
elif [ "$os_name" = "Linux" ]; then
    echo '\x1b[0;31mUpdate the install script for Linux!\x1b[0m'
#     TODO: install software
#     RCRC="$HOME"/.dotfiles/rcrc rcup -d ~/.dotfiles -t linux
#     TODO: settings
#     TODO: Firefox styling
#     shared_setup
else
    echo "\x1b[0;31mNo installation set up for $os_name yet\x1b[0m"
fi

echo 'Setup complete!'
