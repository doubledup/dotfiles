#!/usr/bin/env bash

set -euo pipefail

set_up_doom() {
    git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs
    ~/.config/emacs/bin/doom install
}

set_up_fisher () {
    curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher
    fisher install laughedelic/pisces
    fisher install gazorby/fish-abbreviation-tips
}

set_up_vim () {
    if [ ! -f "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim ]; then
        sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
           https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        printf '\x1b[0;32mVim-plug has been installed.\x1b[0m\n'
    else
        printf '\x1b[0;33mVim-plug is already installed.\x1b[0m\n'
    fi

    python -m pip install pynvim
    npm install -g neovim

    nvim -e -u ~/.config/nvim/init.vim -i NONE -c "PlugInstall" -c "GoInstallBinaries" -c "qa"
    nvim -e -u ~/.config/nvim/init.vim -i NONE -c "TSInstall bash elm fish go javascript python ruby rust solidity typescript vim" -c "qa"
    echo 'Wait for CoC to install its plugins before exiting.' | nvim -R -
}

shared_setup () {
    set_up_doom
    set_up_fisher
    set_up_vim
}

os_name="$(uname -s)"
echo "Setting up $os_name..."

if [ "$os_name" = "Darwin" ]; then
    if [ ! "$(xcode-select --version)" = "" ]; then
        printf '\x1b[0;32mXCode is already installed.\x1b[0m\n'
    else
        if xcode-select --install; then
            printf '\x1b[0;32mInstalled XCode.\x1b[0m\n'
        else
            printf '\x1b[0;31mFailed to install XCode. Exiting.\x1b[0m\n' && exit 1
        fi
    fi

    if sudo softwareupdate --install-rosetta --agree-to-license; then
        printf '\x1b[0;32mInstalled Rosetta.\x1b[0m\n'
    else
        printf '\x1b[0;31mFailed to install Rosetta. Exiting.\x1b[0m\n' && exit 1
    fi
    sudo softwareupdate -ir
    printf '\x1b[0;32mAttempted to install recommended updates.\x1b[0m\n'

    if [ ! -d /opt/homebrew/ ]; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    brew bundle install --file Brewfile

    RCRC="$HOME"/.dotfiles/rcrc rcup -t mac
    ln -s ~/.dotfiles/karabiner/ ~/.config/karabiner

    # disable "smart" quotes
    defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

    chromedir="$(echo "$HOME"/Library/Application\ Support/Firefox/Profiles/*default-release/chrome)"
    mkdir -p chromedir
    if [ ! -f "$chromedir/userChrome.css" ]; then
        ln -s "$HOME"/.dotfiles/userChrome.css "$chromedir"/userChrome.css
        printf '\x1b[0;32mFirefox styling applied.\x1b[0m\n'
    else
        printf '\x1b[0;33mFirefox styling already exists.\x1b[0m\n'
    fi

    shared_setup
elif [ "$os_name" = "Linux" ]; then
    printf '\x1b[0;31mUpdate the install script for Linux!\x1b[0m\n'
    # TODO: install software
    # RCRC="$HOME"/.dotfiles/rcrc rcup -d ~/.dotfiles -t linux
    # TODO: settings
    # TODO: Firefox styling
    # TODO: shared setup
else
    printf '\x1b[0;31mNo installation set up for %s yet\x1b[0m\n' "$os_name"
fi

printf '\x1b[0;32mSetup complete!\x1b[0m\n'
